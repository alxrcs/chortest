--
-- Authors: Emilio Tuosto <emilio.tuosto@gssi.it>
--
-- This file tests the parser of global graphs
--

import Misc
import GCtoLatex
import Data.List as L (null)
import System.Environment (getArgs)
import Data.Map.Strict as M ((!))


split :: String -> [String]
split "" = []
split s =
  let
    (l,s') = aux s ""
  in
    l:(split s')
  where
    aux s a =
      case s of
        '\\':'n':s' -> (a, s')
        [] -> (a, [])
        _ -> aux (tail s) (a ++ [head s])

prettyPrint :: [String] -> IO ()
prettyPrint ls = do
  if ls == []
  then putStrLn "\n% done with gc2latex"
  else (putStrLn $ head ls) >>= \_ -> prettyPrint $ tail ls 

main :: IO ()
main = do
  progargs <- getArgs
  if null progargs
    then putStrLn $ usage GC2LATEX
    else do
    let ( sourcefile, flags ) = getCmd GC2LATEX progargs
    gctxt <- readFile sourcefile
    let vf = flags!"--vfactor"
    let hf = flags!"--hfactor"
    let vunit = flags!"--vunit"
    let hunit = flags!"--hunit"
    case gc2latex gctxt (0, 1) of
      Ok gc ->
        (putStrLn $ "{% generated by gc2latex from " ++ sourcefile ++ "\n\t\
                    \% typesetting commands can be changed;\n\t\
                    \% execute gc2latex without arguments for help"
        )
        >>= \_ -> (putStrLn $ "\t\\def\\vfactor{" ++ vf ++ "}")
        >>= \_ -> (putStrLn $ "\t\\def\\hfactor{" ++ hf ++ "}")
        >>= \_ -> (putStrLn $ "\t\\def\\vunit{" ++ vunit ++ "}\t")
        >>= \_ -> putStrLn "\t\\def\\vshift#1{\\ \\\\[{\\the\\numexpr#1\\relax\\vfactor \\vunit}]}\t"
        >>= \_ -> (putStrLn $ "\t\\def\\hunit{" ++ hunit ++ "}\t")
        >>= \_ -> putStrLn "\t\\def\\hshift#1{\\hspace*{\\the\\numexpr#1\\relax\\hfactor \\hunit}}\t"
        >>= \_ -> putStrLn "\t\\def\\separator#1{{\\colorOp #1}}"
        >>= \_ -> putStrLn "\t\\def\\terminal#1{{\\colorOp\\ensuremath{#1}}}"
        >>= \_ -> (prettyPrint $ (split gc))
        >>= \_ -> putStrLn "}"
      Er err -> putStrLn err
